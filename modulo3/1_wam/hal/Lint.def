               //**************************************************
               //***     CUSTOMIZED HAL DEFINITIONS FILE       ****
               //***     FOR CODINGSTYLE/LINT CHECKS           ****
               //**************************************************

// Each category definition contains the name and description of
// checks (or other categories) that make up the body of the category.
//
// Optionally, the category may contain keywords 'synth_only', 'default_on'
// or 'default_off' after the description.  These keywords, if present,
// control which categories are checked by default (default_off/default_on)
// and whether or not the category is affected by the synthesis_off/on
// pragmas in the HDL source (synth_only).



//***************************************************************************
//** Following is the description of the category hierarchy                **
//***************************************************************************

// Only the categories which have or can have language specific checks are 
// further classified into sub-categories on the basis of language. Those
// which are not classified, by default have checks which are applicable
// to both Verilog and VHDL designs. 


category CLOCKDOMAIN "Verilog/VHDL clock domain checks" default_on synth_only
{
  CLKDMN {level=0} // "Signal from clock domain '%s' is crossing into domain of clock '%s' at flip-flop '%s' without proper synchronization"
  INSYNC {level=1} // "%s based synchronizer detected at '%s' synchronizing from clock domain '%s' to clock domain '%s'"
  NSYLAT {level=1} // "Some instances of latch '%s' are not used as synchronizer"
  CMBCDC {level=1} // "Combinational logic is found in clock domain crossing path at '%s'"
  FLSYNC {level=1} // "Feedback loop present at the first-stage flip-flop of the 2-flip-flop based synchronizer at '%s'"

}




//***************************************************************************
//**    Following is the description of the default HAL parameters         **
//***************************************************************************

// **********************
// Overall HAL parameters
// **********************

// ***********************************************************
// ** Parameter for Allowing/Disallowing severity downgrade **
// ***********************************************************
// By default, HAL does not allow message severity to be downgraded (e.g.
// by specifying a {warning} parameter for a message that was originally
// flagged as an ERROR).  This behavior can be changed by setting the
// 'severity_downgradable' parameter below to 'yes'.

params HAL   {severity_downgradable=no}
// params HAL {severity_downgradable=yes}


// ***********************************************************
// **     Parameter for controlling unclassified rules      **
// ***********************************************************
// By default, HAL does not report messages which are not mentioned in
// this file.  However, there are flows in which it would be preferable
// for unclassified messages to be be reported. The parameter below can
// be used to change this default behavior.

params HAL {disable_unclassified_rules=yes}
//params HAL {disable_unclassified_rules=no}


// ***********************************************************
// **     Parameter for controlling error suppression       **
// ***********************************************************
// By default, HAL allows checks with severity error to be suppresssed
// using -NOCHECK <check_name>/<category_name> command. However if the
// requirement is such that the error severity checks are always flagged,
// the parameter below can be used to change the behavior.

params HAL   {allow_error_suppression=yes}
//params HAL {allow_error_suppression=no}


// ***********************************************************
// **     Parameter for displaying lint pragma control      **
// ***********************************************************
// If the lint pragmas are used in the design, then by default, the
// check/category control introduced using lint pragmas is not output
// in the hal.log file. In case, the information is required, the
// parameter below, can be used to display the information in the logfile.

params HAL {display_rule_control=no}
// params HAL {display_rule_control=yes}


// ****************************
// Category specific parameters
// ****************************


// ***********************************************************
// ** Parameters for controlling the checks in the category **
// ** BEH_CODING_STYLE_VHDL and RTL_CODING_STYLE_VHDL       **
// ***********************************************************

// The checks in the category BEH_CODING_STYLE_VHDL and 
// RTL_CODING_STYLE_VHDL are sensitive to the architecture name
// in the design. By default, the checks in these categories are
// triggered when the architecture name complies to the naming 
// convention prescribed by RMM, to name architectures at different
// levels of abstraction i.e Behavioral and RTL. The below 
// parameters can be used to change the architecture naming pattern
// to which the checks in these two categories are sensitive.

params RTL_ARCHNM {pattern="^(RTL|STR)" text=""}
params BEH_ARCHNM {pattern="^(TB|SIM|BEH)" text=""}




// ****************************
// Check specific parameters
// ****************************

// ***********************************************************
// **   Parameters to specify the file format conventions   **
// ***********************************************************

params MAXPRT {max_ports=25}
params MLITNU {max_literals=20}
params SUBPLN {max_lines=300}
params MXPROC {max_processes=10}
params PBYNAM {num_params=5}
params FILSUF {suffix=.vhd}
params DESULN {max_lines=400}
params INSTLB {max_length=8}
params IDLENG {min_length=4}
params IDLENG {max_length=16}
params ARCHID {suffix_list="rtl|^rtl_|_rtl$|beh|^beh_|_beh$|syn|^syn_|_syn$|ppr|^ppr_|_ppr$|logic|^logic_|_logic$|hls|^hls_|_hls$|vit|^vit_|_vit$|tst|^tst_|_tst$"}



// ***********************************************************
// ** Parameters to control the direction range for arrays  **
// ***********************************************************

// Default direction for range in array/vector declarations is "descending".
// This can be changed to "ascending" below, if that is preferred.  This
// only matters for the DIRRNG check which is a part of part of the RMM
// guidelines as well as the RTL_FILE_FORMAT_MIXED category in HAL.

params DIRRNG {direction=descending}
// params DIRRNG {direction=ascending}


// ***********************************************************
// **Parameters to control the behavior of the UNCONN check **
// ***********************************************************

// By default HAL does not allow the user to leave the output ports of design
// unconnected when connection is done by name, and generates an  UNCONN warning
// for the same. The below parameter can be used to chenge this default 
// behavior. 

params UNCONN {allow_explicitly_unconnected=no}
// params UNCONN {allow_explicitly_unconnected=yes}


// ***********************************************************
// **  Parameters to control the output of -RULES_CHECKED   **
// ***********************************************************

// The following parameters controls the output of -RULES_CHECKED option.
// Following four RULREP parameters in the defines file allow to select
// the kind of rules to be reported by the '-RULES_CHECKED' option:
//  1. Rules successfully checked on the design (no violation)
//     params RULREP {report_successfull=yes|no}
params RULREP {report_successfull=yes}

//  2. Rules violated on the design (one or more violations)
//     params RULREP {report_violated=yes|no}
params RULREP {report_violated=yes}

// Rules not checked on the design
//  3. Deselected or not selected rules from the defines file
//     params RULREP {report_unchecked=yes|no}
params RULREP {report_unchecked=yes}

//  4. Unclassified rules in the definitions file
// params RULREP {report_unclassified=yes|no}
params RULREP {report_unclassified=no}


// ***********************************************************
// **  Parameters to control the behavior of CBYNAM check   **
// ***********************************************************

// The following parameter controls whether the CBYNAM messages should
// be issued for library cells.
// ie. modules with `celldefine statement in Verilog
// and VITAL design units in VHDL with VITAL_LEVEL0&1 attributes.
// By default HAL will flag this check for technology cells instantiated
// in the design.

params CBYNAM {check_tech_cells=yes}
// params CBYNAM {check_tech_cells=no}


// ***********************************************************
// ********  Parameters to control the behavior of  **********
// ********   RDBFAS/REVROP check                    *********
// ***********************************************************

// In Verilog, if a register is assigned using a blocking 
// assignment in an always block then this register will be 
// considered as if it was a "variable" in VHDL process
// There are two checks for this kind of "variable" and these
// are RDBFAS and REVROP. By default these checks will be disabled

params VERILOG_VARIABLE_CHECKS {check_verilog_reg_as_vhdl_var=no}
// params VERILOG_VARIABLE_CHECKS {check_verilog_reg_as_vhdl_var=yes}
 
